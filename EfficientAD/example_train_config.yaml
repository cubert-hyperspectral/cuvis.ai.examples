name: Testrun # name of the training run, will be used in saving and logging

### DATASETS ###
Datasets:
  train:
    root: ../data/bedding_dataset/train
    file_ending: .cu3s
  eval:
    root: ../data/bedding_dataset/val
    file_ending: .cu3s
  imagenet:
    root: ../data/ImageNet_6_channel
    file_ending: .npy

normalize: True # weather to normalize the data or not before putting it through the network
mean: [ 0.31257936, 0.43269954, 0.50889452, 0.64886759, 0.5958548, 0.39783356 ] # calculated mean per channel for the given dataset
std: [ 0.13495414, 0.17394394, 0.19844727, 0.21376508, 0.19457226, 0.13772688 ] # calculated standard deviation per channel for the given dataset
channels: ALL # which channels to use, 'ALL' for 6 channel models, 'RGB' or 'SWIR' for 3 channel models
max_img_shape: 3000 # reduce maximum img shape to stay within memory capacity of the used GPU
white_percentage: 0.55 # Diffuse reflectance of the white target used as reference for the reflectance calculation

### MODEL ###
Model:
  checkpoints: best_teacher_6_channel.pth # checkpoint of the pretrained teacher
  model_size: medium # wich model size to use, either 'medium' or 'small'
  batch_size: 1 # this should always be 1 for EfficientAD
  channel_size: 384 # number of teacher output channels
  in_channels: 6 # number of input channels to the model
  use_imgNet_penalty: True # weather to use the imageNet loss penalty in training
learning_rate: 0.0001
weight_decay: 0.0001
max_steps: 70000
seed: 42

### TRAINING ###
ckpt_dir: ../data/checkpoints # where to save the checkpoints for this run
logger_dir: ../data/logs # where to save the logs for this run